version: '3.8'

services:

  user_db:
    container_name: user_db
    image: mcr.microsoft.com/mssql/server:2022-latest
    environment:
      SA_PASSWORD: "test@123"
      ACCEPT_EULA: Y
    ports:
      - "1401:1433"
    volumes:
      - ./Microservices/UserService/data:/var/opt/mssql/data
      - ./Microservices/UserService/log:/var/mssql/log
      - ./Microservices/UserService/secrets:/var/opt/mssql/secrets
    networks:
      - backend

  friendship_db:
    container_name: friendship_db
    image: mcr.microsoft.com/mssql/server:2022-latest
    environment:
      SA_PASSWORD: "test@123"
      ACCEPT_EULA: Y
    ports:
      - "1402:1433"
    volumes:
      - ./Microservices/FriendshipService/data:/var/opt/mssql/data
      - ./Microservices/FriendshipService/log:/var/mssql/log
      - ./Microservices/FriendshipService/secrets:/var/opt/mssql/secrets 
    networks:
      - backend
  
  friendship-service:
    image: ${DOCKER_REGISTRY-}friendshipservice
    depends_on:
      - friendship_db
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - DbServer=db
      - DbPort=1402
      - DbUser=sa
      - Password=test@123
      - DbName=friendship_service
    container_name: friendship_service
    healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:1433"]
        interval: 30s
        timeout: 10s
        retries: 5
    entrypoint: ["dotnet", "./FriendshipService/FriendshipService.dll"]
    ports:
      - "8082:8080"
    networks:
      - backend


  user-service:
    container_name: user_service
    image: ${DOCKER_REGISTRY-}userservice
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8081:8080"
    depends_on:
      - user_db
    environment:
      - DbServer=db
      - DbPort=1401
      - DbUser=sa
      - Password=test@123
      - DbName=user_service
    healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:1433"]
        interval: 30s
        timeout: 10s
        retries: 5
    entrypoint: ["dotnet", "./UserService/UserService.dll"]
    networks:
      - backend

  apigateway:
    container_name: api-gateway
    image: ${DOCKER_REGISTRY-}apigateway
    build:
      context: ./APIGateway/
      dockerfile: Dockerfile
    ports:
      - "8001:8080"
    networks:
      - backend

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    ports:
      - 5672:5672
      # - 15672:15672
    networks:
      - backend


networks:
  backend:
    driver: bridge